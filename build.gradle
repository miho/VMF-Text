import org.antlr.v4.tool.ErrorType
import java.text.SimpleDateFormat

buildscript {

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath (group: 'org.antlr', name: 'antlr4', version: '4.7')
        classpath group: 'eu.mihosoft.vmf', name: 'vmf', version: '0.1-SNAPSHOT'
    }
}

plugins {
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'maven-publish'
    id 'net.nemerosa.versioning' version '2.4.0'
    id 'com.jfrog.bintray' version '1.7.2'
    id 'com.github.ben-manes.versions' version '0.13.0'
}

apply plugin: 'java'
apply from: 'gradle/publishing.gradle'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
//    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
//    options.compilerArgs << "-Xlint:deprecation" << "-Werror"
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.3'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}


if (!hasProperty('mainClass')) {
    ext.mainClass = 'eu.mihosoft.antlrmodeling01.Main'
}


// -------------------------------
// VMF Model Gen Config
// -------------------------------

configurations{
    vmf {
        extendsFrom compile
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['build/vmf-src-gen', 'build/antlr4-src-gen', 'src/main/java']
        }
    }
    vmf {
        // vmf model sources
    }
}

// -------------------------------

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
   
    compile (group: 'org.antlr', name: 'antlr4', version: '4.7')
    compile (group: 'org.antlr', name: 'antlr4', version: '4.7', classifier: 'sources')

    compile group: 'org.apache.velocity', name: 'velocity-engine-core', version: '1.7'

    vmfCompile group: 'eu.mihosoft.vmf', name: 'vmf', version: '0.1-SNAPSHOT'
    compile group: 'eu.mihosoft.vmf', name: 'vmf', version: '0.1-SNAPSHOT'
    compile group: 'eu.mihosoft.vmf', name: 'vmf-runtime', version: '0.1-SNAPSHOT'

    compile group: 'org.mdkt.compiler', name: 'InMemoryJavaCompiler', version: '1.3.0'

    compile group: 'org.codehaus.groovy', name: 'groovy', version: '2.4.12'
}

class AntlrTool extends org.antlr.v4.Tool {
    public AntlrTool(String[] args) {
        super(args);
    }
    public void exit(int e) {}
    public static void main(String[] args) {
        AntlrTool antlr = new AntlrTool(args);
        if ( args.length == 0 ) { antlr.help(); antlr.exit(0); }

        try {
            antlr.processGrammarsOnCommandLine();
        }
        finally {
            if ( antlr.log ) {
                try {
                    String logname = antlr.logMgr.save();
                    System.out.println("wrote "+logname);
                }
                catch (IOException ioe) {
                    antlr.errMgr.toolError(ErrorType.INTERNAL_ERROR, ioe);
                }
            }
        }
        if ( antlr.return_dont_exit ) return;

        if (antlr.errMgr.getNumErrors() > 0) {
            antlr.exit(1);
        }
        antlr.exit(0);
    }
}

task cleanAntlr {
    doLast {
        new File("$buildDir/antlr4-src-gen/").listFiles().each {
            f -> f.delete()
        }
    }
}

task antlr4(dependsOn: ['cleanAntlr','vmfGenModelSources']) {
    doLast() {
        def baseDir = projectDir.absolutePath
        def srcPath = baseDir + "/src/main/resources/eu/mihosoft/vmf/vmftext/antlr"
        def libPath = srcPath
        def outPath = "$buildDir/antlr4-src-gen/eu/mihosoft/vmf/vmftext/grammar/antlr4"
        def grammarFile = srcPath + "/ANTLRv4Parser.g4"
        def grammarFileDep1 = srcPath + "/ANTLRv4Lexer.g4"
        def grammarFileDep2 = srcPath + "/LexBasic.g4"

        AntlrTool.main(
                [grammarFile,
                 grammarFileDep1,
                 "-listener", "-visitor",
                 "-package", "eu.mihosoft.vmf.vmftext.grammar.antlr4",
                 "-lib",
                 srcPath,
                 "-o", outPath] as String[])
    }

    doLast() {
        def baseDir = projectDir.absolutePath
        def srcPath = baseDir + "/src/main/resources/eu/mihosoft/vmf/vmftext/antlr"
        def libPath = srcPath
        def outPath = "$buildDir/antlr4-src-gen/eu/mihosoft/vmf/vmftext/grammar/java9"
        def grammarFile = srcPath + "/Java9.g4"

        AntlrTool.main(
                [grammarFile,
                 "-listener", "-visitor",
                 "-package", "eu.mihosoft.vmf.vmftext.grammar.java9",
                 "-lib",
                 libPath,
                 "-o", outPath] as String[])
    }

    doLast() {
        def baseDir = projectDir.absolutePath
        def srcPath = baseDir + "/src/main/resources/eu/mihosoft/vmf/vmftext/antlr"
        def libPath = srcPath
        def outPath = "$buildDir/antlr4-src-gen/eu/mihosoft/vmf/vmftext/grammar/typemapping"
        def grammarFile = srcPath + "/TypeMapping.g4"

        AntlrTool.main(
                [grammarFile,
                 "-listener", "-visitor",
                 "-package", "eu.mihosoft.vmf.vmftext.grammar.typemapping",
                 "-lib",
                 libPath,
                 "-o", outPath] as String[])
    }

    doLast() {
        def baseDir = projectDir.absolutePath
        def srcPath = baseDir + "/src/main/resources/eu/mihosoft/vmf/vmftext/antlr"
        def libPath = srcPath
        def outPath = "$buildDir/antlr4-src-gen/eu/mihosoft/vmf/vmftext/grammar/vmftextcomments"
        def grammarFile = srcPath + "/VMFTextComments.g4"

        AntlrTool.main(
                [grammarFile,
                 "-listener", "-visitor",
                 "-package", "eu.mihosoft.vmf.vmftext.grammar.vmftextcomments",
                 "-lib",
                 libPath,
                 "-o", outPath] as String[])
    }

    doLast() {
        def baseDir = projectDir.absolutePath
        def srcPath = baseDir + "/src/main/resources/eu/mihosoft/vmf/vmftext/antlr"
        def libPath = srcPath
        def outPath = "$buildDir/antlr4-src-gen/eu/mihosoft/vmf/vmftext/grammar/custommodeldef"
        def grammarFile = srcPath + "/CustomModelDefinitions.g4"
        def grammarFile2 = srcPath + "/Java9.g4"

        AntlrTool.main(
                [grammarFile, grammarFile2,
                 "-listener", "-visitor",
                 "-package", "eu.mihosoft.vmf.vmftext.grammar.custommodeldef",
                 "-lib",
                 libPath,
                 "-o", outPath] as String[])
    }
}

task antlr4test() {
    doLast() {
        def baseDir = projectDir.absolutePath
        def srcPath = baseDir + "/src/main/resources/eu/mihosoft/vmf/vmftext/antlr"
        def libPath = srcPath
        def outPath = "$buildDir/antlr4-src-gen/eu/mihosoft/vmf/vmftext/grammar/antlr4test"
        def grammarFile = srcPath + "/GrammarVMF2.g4"

        AntlrTool.main(
                [grammarFile,
                 "-listener", "-visitor",
                 "-package", "eu.mihosoft.vmf.vmftext.grammar.antlr4test",
                 "-lib",
                 srcPath,
                 "-o", outPath] as String[])
    }
}


// -------------------------------
// VMF Model Gen Config
// -------------------------------

task cleanVmf {
    doLast {
        new File("$buildDir/vmf-src-gen/").listFiles().each {
            f -> f.delete()
        }
    }
}

task vmfGenModelSources(dependsOn: [cleanVmf, vmfClasses]) {

    // execute the task
    doLast {
        def urls = []
        // add model dependencies
        for(File clsDir : sourceSets.vmf.output.classesDirs) {
            urls.add(new File(clsDir.toString())
                    .toURI().toURL())
        }

        eu.mihosoft.vmf.VMF.generate(new File("$buildDir/vmf-src-gen"),
                new URLClassLoader(urls as URL[],
                        eu.mihosoft.vmf.VMF.class.getClassLoader()),
                "eu.mihosoft.vmf.vmftext.grammar.vmfmodel")
    }
}

tasks.withType(JavaCompile) {
    compileTask ->
        if(!compileTask.name.startsWith("compileVmf")) {
            compileTask.dependsOn(['vmfGenModelSources', 'antlr4'])
        }
}

// -------------------------------

license {
    header = rootProject.file('config/HEADER')
    strictCheck = true
    ignoreFailures = true
    mapping {
        java   = 'SLASHSTAR_STYLE'
        groovy = 'SLASHSTAR_STYLE'
        fxml   = 'XML_STYLE'
    }
    ext.yearSince1   = '2017'
    ext.yearCurrent  = new SimpleDateFormat("yyyy").format(new Date())
    ext.author1 = 'Michael Hoffer <info@michaelhoffer.de>'
    exclude '**/*.svg'
}

