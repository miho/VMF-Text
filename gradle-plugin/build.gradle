plugins {
    id "com.gradle.plugin-publish" version "2.0.0"
    id 'com.github.hierynomus.license' version '0.16.1'
    id 'maven-publish'
    id 'net.nemerosa.versioning' version '3.0.0'
    id 'com.github.ben-manes.versions' version '0.44.0'
}

ext.commonProps = new Properties()
file(new File(projectDir.parentFile,"config/common.properties")).withInputStream { commonProps.load(it) }

wrapper {
    gradleVersion = '9.0.0'
}

repositories {
    mavenCentral()
    mavenLocal()
}

apply plugin: 'groovy'

apply from: 'gradle/publishing.gradle'

//sourceCompatibility = '11'
//targetCompatibility = '11'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

java {
    toolchain {
        // Gradle 8+ runs on JDK 17+, but we target Java 11 bytecode
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.withType(JavaCompile).configureEach {
    //    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
    //    options.compilerArgs << "-Xlint:deprecation" << "-Werror"
    options.release = 11
}


dependencies {
    implementation gradleApi()
    implementation localGroovy()

    implementation group: 'eu.mihosoft.vmf', name: 'vmf-text', version: '0.2-SNAPSHOT'

    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation gradleTestKit()
}

// Modern plugin declaration for Plugin Portal/publication
gradlePlugin {
    website = 'https://github.com/miho/VMF-Text-Gradle-Plugin'
    vcsUrl  = 'https://github.com/miho/VMF-Text-Gradle-Plugin'

    plugins {
        vmfTextPlugin {
            id = 'eu.mihosoft.vmftext'
            implementationClass = 'eu.mihosoft.vmf.vmftext.gradle.plugin.VMFTextPlugin'
            displayName = 'Gradle VMF-Text plugin'
            description = 'Gradle VMF-Text plugin'
            tags.set(['vmf-text', 'language modeling framework'])
        }
    }
}


license {
    // Prefer header from sibling 'core'; fallback to 'test-suite'
    def coreHeader = project.file('../core/config/HEADER')
    def testSuiteHeader = project.file('../test-suite/config/HEADER')
    header = coreHeader.exists() ? coreHeader : testSuiteHeader
    strictCheck = true
    ignoreFailures = true
    mapping {
        java   = 'SLASHSTAR_STYLE'
        groovy = 'SLASHSTAR_STYLE'
        fxml   = 'XML_STYLE'
    }
}

// required on JDK 17 and later for some test environments
tasks.withType(Test).configureEach {
    jvmArgs('--add-opens=java.base/java.lang=ALL-UNNAMED')
}



