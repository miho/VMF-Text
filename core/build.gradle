import org.antlr.v4.tool.ErrorType
import java.text.SimpleDateFormat

buildscript {

    ext.commonProps = new Properties()
    file(new File(projectDir.parentFile,"config/common.properties")).withInputStream { commonProps.load(it) }


    repositories {
//        jcenter()
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath (group: 'org.antlr', name: 'antlr4', version: '4.11.1')
//        classpath group: 'eu.mihosoft.vmf', name: 'vmf', version: '0.1-SNAPSHOT'
    }
}


plugins {
    id 'eu.mihosoft.vmf' version '0.2.9.7-SNAPSHOT'
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'maven-publish'
    id 'net.nemerosa.versioning' version '2.4.0'
    id 'com.github.ben-manes.versions' version '0.13.0'
}

apply plugin: 'java'
apply plugin: 'idea'
apply from: 'gradle/publishing.gradle'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

tasks.withType(JavaCompile) {
//    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
//    options.compilerArgs << "-Xlint:deprecation" << "-Werror"
    options.release = 11
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

repositories {
    mavenCentral()
//    jcenter()
    mavenLocal()
}

wrapper {
    gradleVersion = '9.0.0'
}


if (!hasProperty('mainClass')) {
    ext.mainClass = 'eu.mihosoft.antlrmodeling01.Main'
}


// -------------------------------
// VMF Model Gen Config
// -------------------------------
// vmf.version = "0.1.1"

sourceSets {
    main {
        java {
            srcDir 'build/antlr4-src-gen'
        }
    }
}

// -------------------------------

repositories {
    mavenCentral()
    mavenLocal()
//    jcenter()
}

dependencies {
   
    implementation (group: 'org.antlr', name: 'antlr4', version: '4.10.1')

    implementation group: 'eu.mihosoft.ext.velocity.legacy', name: 'velocity-legacy', version: '1.7.4'

    implementation group: 'eu.mihosoft.vmf', name: 'vmf', version: '0.2.9.7-SNAPSHOT'
    implementation group: 'eu.mihosoft.vmf', name: 'vmf-runtime', version: '0.2.9.7-SNAPSHOT'

    implementation group: 'org.mdkt.compiler', name: 'InMemoryJavaCompiler', version: '1.3.0'
    implementation group: 'org.codehaus.groovy', name: 'groovy', version: '2.4.12'
}

class AntlrTool extends org.antlr.v4.Tool {
    public AntlrTool(String[] args) {
        super(args);
    }
    public void exit(int e) {}
    public static void main(String[] args) {
        AntlrTool antlr = new AntlrTool(args);
        if ( args.length == 0 ) { antlr.help(); antlr.exit(0); }

        try {
            antlr.processGrammarsOnCommandLine();
        }
        finally {
            if ( antlr.log ) {
                try {
                    String logname = antlr.logMgr.save();
                    System.out.println("wrote "+logname);
                }
                catch (IOException ioe) {
                    antlr.errMgr.toolError(ErrorType.INTERNAL_ERROR, ioe);
                }
            }
        }
        if ( antlr.return_dont_exit ) return;

        if (antlr.errMgr.getNumErrors() > 0) {
            antlr.exit(1);
        }
        antlr.exit(0);
    }
}

task cleanAntlr {
    doLast {
        new File("$buildDir/antlr4-src-gen/").listFiles().each {
            f -> f.delete()
        }
    }
}

clean.dependsOn('cleanAntlr')

task antlr4 {
    doLast() {
        def baseDir = projectDir.absolutePath
        def srcPath = baseDir + "/src/main/resources/eu/mihosoft/vmf/vmftext/antlr"
        def libPath = srcPath
        def outPath = "$buildDir/antlr4-src-gen/eu/mihosoft/vmf/vmftext/grammar/antlr4"
        def grammarFile = srcPath + "/ANTLRv4Parser.g4"
        def grammarFileDep1 = srcPath + "/ANTLRv4Lexer.g4"
        def grammarFileDep2 = srcPath + "/LexBasic.g4"

        AntlrTool.main(
                [grammarFile,
                 grammarFileDep1,
                 "-listener", "-visitor",
                 "-package", "eu.mihosoft.vmf.vmftext.grammar.antlr4",
                 "-lib",
                 srcPath,
                 "-o", outPath] as String[])
    }

    doLast() {
        def baseDir = projectDir.absolutePath
        def srcPath = baseDir + "/src/main/resources/eu/mihosoft/vmf/vmftext/antlr"
        def libPath = srcPath
        def outPath = "$buildDir/antlr4-src-gen/eu/mihosoft/vmf/vmftext/grammar/java9"
        def grammarFile = srcPath + "/Java9.g4"

        AntlrTool.main(
                [grammarFile,
                 "-listener", "-visitor",
                 "-package", "eu.mihosoft.vmf.vmftext.grammar.java9",
                 "-lib",
                 libPath,
                 "-o", outPath] as String[])
    }

    doLast() {
        def baseDir = projectDir.absolutePath
        def srcPath = baseDir + "/src/main/resources/eu/mihosoft/vmf/vmftext/antlr"
        def libPath = srcPath
        def outPath = "$buildDir/antlr4-src-gen/eu/mihosoft/vmf/vmftext/grammar/typemapping"
        def grammarFile = srcPath + "/TypeMapping.g4"

        AntlrTool.main(
                [grammarFile,
                 "-listener", "-visitor",
                 "-package", "eu.mihosoft.vmf.vmftext.grammar.typemapping",
                 "-lib",
                 libPath,
                 "-o", outPath] as String[])
    }

    doLast() {
        def baseDir = projectDir.absolutePath
        def srcPath = baseDir + "/src/main/resources/eu/mihosoft/vmf/vmftext/antlr"
        def libPath = srcPath
        def outPath = "$buildDir/antlr4-src-gen/eu/mihosoft/vmf/vmftext/grammar/vmftextcomments"
        def grammarFile = srcPath + "/VMFTextComments.g4"

        AntlrTool.main(
                [grammarFile,
                 "-listener", "-visitor",
                 "-package", "eu.mihosoft.vmf.vmftext.grammar.vmftextcomments",
                 "-lib",
                 libPath,
                 "-o", outPath] as String[])
    }

    doLast() {
        def baseDir = projectDir.absolutePath
        def srcPath = baseDir + "/src/main/resources/eu/mihosoft/vmf/vmftext/antlr"
        def libPath = srcPath
        def outPath = "$buildDir/antlr4-src-gen/eu/mihosoft/vmf/vmftext/grammar/custommodeldef"
        def grammarFile = srcPath + "/CustomModelDefinitions.g4"
        def grammarFile2 = srcPath + "/Java9.g4"

        AntlrTool.main(
                [grammarFile, grammarFile2,
                 "-listener", "-visitor",
                 "-package", "eu.mihosoft.vmf.vmftext.grammar.custommodeldef",
                 "-lib",
                 libPath,
                 "-o", outPath] as String[])
    }
}

task antlr4test() {
    doLast() {
        def baseDir = projectDir.absolutePath
        def srcPath = baseDir + "/src/main/resources/eu/mihosoft/vmf/vmftext/antlr"
        def libPath = srcPath
        def outPath = "$buildDir/antlr4-src-gen/eu/mihosoft/vmf/vmftext/grammar/antlr4test"
        def grammarFile = srcPath + "/GrammarVMF2.g4"

        AntlrTool.main(
                [grammarFile,
                 "-listener", "-visitor",
                 "-package", "eu.mihosoft.vmf.vmftext.grammar.antlr4test",
                 "-lib",
                 srcPath,
                 "-o", outPath] as String[])
    }
}

// before we compile we need to run the antlr4 code generator
project.tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn('antlr4')
}


jar {
    manifest {
        attributes('Automatic-Module-Name': 'eu.mihosoft.vmf.vmftext')
    }
}


// -------------------------------

license {

    header = rootProject.file('config/HEADER')
    strictCheck = true
    ignoreFailures = true

    mapping {
        java   = 'SLASHSTAR_STYLE'
        groovy = 'SLASHSTAR_STYLE'
        fxml   = 'XML_STYLE'
    }

    ext.yearCurrent  = new SimpleDateFormat("yyyy").format(new Date())
    ext.yearSince1   = '2017'
    ext.author1 = 'Michael Hoffer <info@michaelhoffer.de>'
    ext.yearSince2   = '2017'
    ext.author2 = 'Goethe Center for Scientific Computing, University Frankfurt'


    include 'src/vmf/'

    exclude '**/*.svg'

}

ext.vmfPluginIntelliJIntegration = true
idea.module {
        dependencies {
            implementation group: 'eu.mihosoft.vmf', name: 'vmf', version: '0.2.8.7'
        }
}

