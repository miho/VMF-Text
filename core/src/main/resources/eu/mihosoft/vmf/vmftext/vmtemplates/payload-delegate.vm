#*
 * Copyright 2017-2018 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 * Copyright 2017-2018 Goethe Center for Scientific Computing, University Frankfurt. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 *#
package ${packageName}.vmfdelegation;

import java.io.PrintWriter;
import java.io.IOException;
import java.util.Objects;
import java.util.Optional;

import eu.mihosoft.vmf.runtime.core.VMF;
import eu.mihosoft.vmf.runtime.core.DelegatedBehavior;

import ${packageName}.Payload;

public class PayloadDelegate implements DelegatedBehavior<Payload> {

  private Payload caller;
  private java.util.Map<String, Object> map;

  private java.util.Map<String, Object> _getMap() {
    if(map == null) {
      map = new java.util.HashMap<>();
    }

    return map;
  }

  public void setCaller(Payload payload) {
    this.caller = payload;
  }

  public <T> T payloadGet(String key) {
    return (T) _getMap().get(key);
  }

  public void payloadSet(String key, Object o) {
    _getMap().put(key,o);
  }

}
