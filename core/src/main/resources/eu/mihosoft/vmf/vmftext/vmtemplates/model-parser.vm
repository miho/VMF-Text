#*
 * Copyright 2017-2018 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 * Copyright 2017-2018 Goethe Center for Scientific Computing, University Frankfurt. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 *#
package ${packageName};

// TODO 19.08.2018 get rid of this import to prevent name clashes
import eu.mihosoft.vmf.core.*;

interface ${Util.firstToUpper($model.grammarName)}Model {
#if(${model.hasRootClass()})

  ${model.rootClass().nameWithUpper()} getRoot();

#end
}

@eu.mihosoft.vmf.core.Immutable
interface CodeRange {
  CodeLocation getStart();
  CodeLocation getStop();
  int getLength();
}

@eu.mihosoft.vmf.core.Immutable
interface CodeLocation {
  int getIndex();
  int getLine();
  int getCharPosInLine();
}

@eu.mihosoft.vmf.core.InterfaceOnly
@eu.mihosoft.vmf.core.DelegateTo(className="${delegationPackageName}.CodeElementDelegate")
interface CodeElement {
  //@eu.mihosoft.vmf.core.IgnoreToString
  @eu.mihosoft.vmf.core.IgnoreEquals
  CodeRange getCodeRange();

  @eu.mihosoft.vmf.core.IgnoreEquals
  CodeElement getParent();

  @eu.mihosoft.vmf.core.DelegateTo(className="${delegationPackageName}.CodeElementDelegate")
  CodeElement root();

  @eu.mihosoft.vmf.core.DelegateTo(className="${delegationPackageName}.CodeElementDelegate")
  eu.mihosoft.vcollections.VList<CodeElement> pathToRoot();

  @eu.mihosoft.vmf.core.IgnoreEquals
  Object getPayload();
}

#foreach( $rcls in ${model.ruleClasses} )
#if( !$rcls.childClasses.empty )
@eu.mihosoft.vmf.core.InterfaceOnly
#end
#foreach( $ann in ${rcls.getCustomRuleAnnotations()} )
$ann.getText()
#end
interface ${rcls.nameWithUpper()}#if($rcls.superClass) extends ${rcls.superClass.nameWithUpper()}#else extends CodeElement#end#if(!$rcls.getSuperInterfaces().isEmpty()), /*custom model types:*/ #end${rcls.superInterfacesString()} {
#set($ruleClass=$rcls)
#parse("${TEMPLATE_PATH}rule-class.vm")

  // Delegation methods
#foreach( $dm in ${rcls.delegationMethods} )
  $dm.getText()
#end

}

#end## end for each rule class

// Custom model classes

#foreach( $cmc in ${model.customRules})
$cmc.getText()
#end
