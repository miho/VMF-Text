#*
 * Copyright 2016-2017 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 *#
package ${modelPackageName}.unparser;

import java.io.PrintWriter;
import java.io.IOException;
import java.util.Objects;

import ${modelPackageName}.CodeElement;

public interface Formatter {

  default void pre( ${model.grammarName}ModelUnparser unparser, CodeElement ruleObj, String ruleText, PrintWriter w ){};
  default void post(${model.grammarName}ModelUnparser unparser, CodeElement ruleObj, String ruleText, PrintWriter w ){};

  default void pre( ${model.grammarName}ModelUnparser unparser, Object ruleObj, String ruleText, PrintWriter w ){};
  default void post(${model.grammarName}ModelUnparser unparser, Object ruleObj, String ruleText, PrintWriter w ){};

  static Formatter newDefaultFormatter() { return new DefaultFormatter();}

}

class DefaultFormatter implements Formatter {

  private String last = "";
  private String indent = "";

  String getIndent() {
    return indent;
  }

  void inc() {
    indent+="  ";
  }

  void dec() {
    if(indent.length() > 1) {
      indent=indent.substring(2);
    }
  }

  public void pre( ${model.grammarName}ModelUnparser unparser, CodeElement ruleObj, String ruleText, PrintWriter w ) {



    if(Objects.equals(ruleText, "}")) {
      dec();
      w.append('\n').append(getIndent());
    }
  }
  public void post(${model.grammarName}ModelUnparser unparser, CodeElement ruleObj, String ruleText, PrintWriter w ) {
    if(Objects.equals(ruleText, "{")) {
      inc();
      w.append('\n').append(getIndent());
    } else if(Objects.equals(ruleText, ";")) {
      w.append('\n').append(getIndent());
    } else{
      w.append(" ");
    }

    last = ruleText;
  }
}